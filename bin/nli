#!/usr/bin/env nodeh

/*!
 * nli
 * Copyright(c) 2014 Madhusudhan Srinivasa <me@madhums.me>
 * MIT Licensed
 */

/*!
 * Module dependencies.
 */

var fs = require('fs');
var program = require('commander');
var mkdirp = require('mkdirp');
var co = require('co');
var prompt = require('co-prompt');

var pkg = require('../package.json');
var contents = require('../lib/');
var eol = require('os').EOL;
var infoFilePath = process.env.HOME + '/.nlinfo.json';
var _repo = '';

var confirm = prompt.confirm;

program
  .version(pkg.version)
  .option('-d, --desc <desc>', 'A command to init node modules')
  .option('-A, --author <author>', 'Name of the module author')
  .option('-E, --email <email>', 'Email the module author');

program
  .command('setup <repo>')
  .description('Setup node module with repo (username/repo)')
  .action(setup);

program
  .command('info [options]')
  .description('Stores the author name and email in ~/.nlinfo.json')
  .action(storeInfo);

program
  .parse(process.argv);

/**
 * Setup
 *
 * @param {String} repo
 * @param {String} desc
 * @api private
 */

function setup (repo, desc) {
  var dir = process.cwd() + '/' + repo;
  var files = [
    '.gitignore',
    '.jshintrc',
    '.jshintignore',
    'package.json',
    'README.md',
    'CHANGELOG.md',
    'index.js',
    'lib/index.js',
    'test/index.js'
  ];
  _repo = repo;

  mkdirp(dir, function (err) {
    process.chdir(dir);

    console.log('');
    console.log('\t' + repo);

    co(function *() {
      for(var i = 0; i < files.length; i++) {
        var gen = yield writeFile(files[i]);
      }
      console.log('\n');
      process.stdin.pause();
    })();
  });
}

/**
 * writeFile
 *
 * @param {String} name
 * @api private
 */

function *writeFile (name) {
  var dir = process.cwd() + '/' + name.split('/')[0];
  var text = 'creating';

  // If it is a file, simply write it
  if (~name.indexOf('/')) {
    mkdirp.sync(dir);
    dir = dir + '/' + name.split('/')[1];
  }

  if (fs.existsSync(dir)) {
    var ok = yield confirm('\n\t' + name + ' already exists. Do you want to overwrite?\n\t');
    if (!ok) {
      process.stdin.destroy();
    } else {
      text = 'overwriting';
      process.stdin.resume();
    }
  }

  console.log('\t' + text +': ' + name);
  fs.writeFileSync(dir, replaceInfo(contents[name]));
}

/**
 * replaceInfo
 *
 * Replace the following with actual info
 *
 * {{ NAME }}
 * {{ REPO }}
 * {{ DESCRIPTION }}
 * {{ AUTHOR }}
 * {{ EMAIL }}
 *
 * @param {String} content
 * @return {String}
 * @api private
 */

function replaceInfo (content) {
  var info = fs.readFileSync(infoFilePath, 'utf-8');
  info = JSON.parse(info);
  return content
    .replace(/{{ NAME }}/g, _repo.split('/')[1])
    .replace(/{{ REPO }}/g, _repo)
    .replace(/{{ DESCRIPTION }}/g, program.desc)
    .replace(/{{ AUTHOR }}/g, info.author)
    .replace(/{{ EMAIL }}/g, info.email);
}

/**
 * storeInfo
 */

function storeInfo () {
  if (!(program.author && program.email)) {
    var info = getInfo();
    if (!info) {
      console.log('No author information has been stored in ' + infoFilePath);
    } else {
      console.log(info);
    }
    return;
  }

  var info = {
    author: program.author,
    email: program.email
  };
  var content = JSON.stringify(info) + eol;
  fs.writeFile(infoFilePath, content, function (err) {
    if (err) throw err;
    console.log('Saved author info to: ' + infoFilePath);
  });
}

/**
 * getInfo
 */

function getInfo () {
  if (!fs.existsSync(infoFilePath)) return;
  var info = fs.readFileSync(infoFilePath, 'utf-8');
  return JSON.parse(info);
}
